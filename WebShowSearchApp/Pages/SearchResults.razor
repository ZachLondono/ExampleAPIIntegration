@page "/search/{Query}"
@inject IShowSearchService SearchService
@inject NavigationManager NavigationManager

<PageTitle>Search: @Query</PageTitle>

@if (_didQueryFail) {
    <div class="mx-auto w-fit text-red-600">
        <span>Error searching for shows...</span>
        <br />
        <span>@_errorMsg</span>
    </div>
}

<div class="mx-auto mt-3 max-w-7xl mb-12">
    
    <header>
        <div class="mb-2">
            <h1 class="pl-2 text-white text-lg focus:outline-none">Search Results</h1>
        </div>
        <div class="mb-2">
            <p class="pl-2 text-slate-400 text-sm focus:outline-none">Found @_shows.Count Shows</p>
        </div>
    </header>

    @if (_shows.Any()) {

        <div class="container flex flex-wrap justify-center justify-between gap-y-5">
            @foreach (var show in _shows) {
                <SearchResult Show=show></SearchResult>
            }
        </div>
        
    }

</div>

@code {

    [Parameter]
    public string Query { get; set; } = string.Empty;

    private IReadOnlyCollection<Show> _shows = new List<Show>();

    private SearchBar? _searchBar;

    private bool _didQueryFail = false;
    private string _errorMsg = string.Empty;

    protected override async Task OnInitializedAsync() {

        if (string.IsNullOrEmpty(Query)) return;

        var request = new SearchByNameRequest(Query);
        var response = await SearchService.SearchByNameAsync(request);

        response.Match(
            result => _shows = result.Shows,
            error => DisplayShowLoadError(error.Reason)
        );

    }

    private void DisplayShowLoadError(string message) {
        _didQueryFail = true;
        _errorMsg = message;
    }

    private void SearchForCurrentQuery() {
        if (_searchBar is null || string.IsNullOrWhiteSpace(_searchBar.Query)) return;
        NavigationManager.NavigateTo($"/search/{_searchBar.Query}",forceLoad:true);
    }

}
