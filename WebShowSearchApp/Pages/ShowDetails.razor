@page "/shows/{ShowId:int}"
@inject IShowSearchService SearchService;

@if (_show is not null) {
    <PageTitle>@_show.Name</PageTitle>
} else {
    <PageTitle>Show Details</PageTitle>
}

<div class="flex">
    @if (_show is not null) {

        <div>
            <img src="@_show.ImageLink">
        </div>

        <div class="ml-3 p-4 bg-slate-400">

            <h3 class="text-white font-semibold text-lg mx-auto">@_show.Name</h3>
            <div class="">@GetDateString()</div>
            @{
                var count = @_episodesBySeason.Count();
                <div>@(count + ((count > 1) ? " Seasons" : " Season"))</div>
            }

        </div>

    } else {
        <img src="images/placeholder.jpg">
    }
</div>

@foreach (var season in _episodesBySeason.Keys) {

    <div class="text-white mx-auto">Season @season</div>
    <table class="text-white mb-20 w-full">
        <thead class="bg-slate-700">
            <tr>
                <th class="border-b border-slate-700 pl-8 text-left pt-4">#</th>
                <th class="border-b border-slate-700 pl-8 text-left pt-4">Name</th>
            </tr>
        </thead>
        <tbody class="bg-slate-800">
            @foreach (var episode in _episodesBySeason[season]) {
                <tr>
                    <td class="border-b border-slate-700 p-4 pl-8 text-slate-300">@episode.NumberInSeason</td>
                    <td class="border-b border-slate-700 p-4 pl-8 text-slate-300">@episode.Name</td>
                </tr>
            }
        </tbody>
    </table>

}

@if(_didEpisodesLoadFail) {
    <span>@_loadErrorMessage</span>
}

@code {

    [Parameter]
    public int ShowId { get; set; }

    private Show? _show;
    private Dictionary<int, List<Episode>> _episodesBySeason = new ();

    private bool _didEpisodesLoadFail = false;
    private string _loadErrorMessage = "";

    protected override async Task OnInitializedAsync() {

        var showRequest = new GetShowDetailsByIdRequest(ShowId);
        var showResponse = await SearchService.GetShowDetailsById(showRequest);

        showResponse.Match(
            result => _show = result.Show,
            error => DisplayEpisodeLoadError(error.Reason)
        );

        var episodeRequest = new ListEpisodesByShowIdRequest(ShowId);
        var episodeResponse = await SearchService.ListEpisodesByShowIdAsync(episodeRequest);

        episodeResponse.Match(
            result => SetEpisodeList(result.Episodes),
            error => DisplayEpisodeLoadError(error.Reason)
        );

    }

    public void SetEpisodeList(IReadOnlyCollection<Episode> episodes) {
        _episodesBySeason = episodes.GroupBy(e => e.Season)
                                    .ToDictionary(g => g.Key, g => g.ToList());
    }

    private void DisplayEpisodeLoadError(string message) {
        _didEpisodesLoadFail = true;
        _loadErrorMessage = message;
    }

    public string GetDateString() {
        if (_show is null || _show.PremiereDate is null) return "";

        if (_show.EndDate is null) {
            return $"{_show.PremiereDate.Value.ToShortDateString()} - present";
        }

        return $"{_show.PremiereDate.Value.ToShortDateString()} - {_show.EndDate.Value.ToShortDateString()}";

    }

}
